// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2019 21:28:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adder_4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_4bit_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	c_in,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  c_in;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or c_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module adder_4bit_vlg_check_tst (
	c0,
	c1,
	c2,
	c_out,
	sum0,
	sum1,
	sum2,
	sum3,
	sampler_rx
);
input  c0;
input  c1;
input  c2;
input  c_out;
input  sum0;
input  sum1;
input  sum2;
input  sum3;
input sampler_rx;

reg  c0_expected;
reg  c1_expected;
reg  c2_expected;
reg  c_out_expected;
reg  sum0_expected;
reg  sum1_expected;
reg  sum2_expected;
reg  sum3_expected;

reg  c0_prev;
reg  c1_prev;
reg  c2_prev;
reg  c_out_prev;
reg  sum0_prev;
reg  sum1_prev;
reg  sum2_prev;
reg  sum3_prev;

reg  c_out_expected_prev;
reg  sum0_expected_prev;
reg  sum1_expected_prev;
reg  sum2_expected_prev;
reg  sum3_expected_prev;

reg  last_c_out_exp;
reg  last_sum0_exp;
reg  last_sum1_exp;
reg  last_sum2_exp;
reg  last_sum3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	c0_prev = c0;
	c1_prev = c1;
	c2_prev = c2;
	c_out_prev = c_out;
	sum0_prev = sum0;
	sum1_prev = sum1;
	sum2_prev = sum2;
	sum3_prev = sum3;
end

// update expected /o prevs

always @(trigger)
begin
	c_out_expected_prev = c_out_expected;
	sum0_expected_prev = sum0_expected;
	sum1_expected_prev = sum1_expected;
	sum2_expected_prev = sum2_expected;
	sum3_expected_prev = sum3_expected;
end



// expected sum0
initial
begin
	sum0_expected = 1'bX;
end 

// expected sum1
initial
begin
	sum1_expected = 1'bX;
end 

// expected sum2
initial
begin
	sum2_expected = 1'bX;
end 

// expected sum3
initial
begin
	sum3_expected = 1'bX;
end 

// expected c_out
initial
begin
	c_out_expected = 1'bX;
end 
// generate trigger
always @(c0_expected or c0 or c1_expected or c1 or c2_expected or c2 or c_out_expected or c_out or sum0_expected or sum0 or sum1_expected or sum1 or sum2_expected or sum2 or sum3_expected or sum3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c0 = %b | expected c1 = %b | expected c2 = %b | expected c_out = %b | expected sum0 = %b | expected sum1 = %b | expected sum2 = %b | expected sum3 = %b | ",c0_expected_prev,c1_expected_prev,c2_expected_prev,c_out_expected_prev,sum0_expected_prev,sum1_expected_prev,sum2_expected_prev,sum3_expected_prev);
	$display("| real c0 = %b | real c1 = %b | real c2 = %b | real c_out = %b | real sum0 = %b | real sum1 = %b | real sum2 = %b | real sum3 = %b | ",c0_prev,c1_prev,c2_prev,c_out_prev,sum0_prev,sum1_prev,sum2_prev,sum3_prev);
`endif
	if (
		( c_out_expected_prev !== 1'bx ) && ( c_out_prev !== c_out_expected_prev )
		&& ((c_out_expected_prev !== last_c_out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_out_expected_prev);
		$display ("     Real value = %b", c_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_out_exp = c_out_expected_prev;
	end
	if (
		( sum0_expected_prev !== 1'bx ) && ( sum0_prev !== sum0_expected_prev )
		&& ((sum0_expected_prev !== last_sum0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum0_expected_prev);
		$display ("     Real value = %b", sum0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sum0_exp = sum0_expected_prev;
	end
	if (
		( sum1_expected_prev !== 1'bx ) && ( sum1_prev !== sum1_expected_prev )
		&& ((sum1_expected_prev !== last_sum1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum1_expected_prev);
		$display ("     Real value = %b", sum1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sum1_exp = sum1_expected_prev;
	end
	if (
		( sum2_expected_prev !== 1'bx ) && ( sum2_prev !== sum2_expected_prev )
		&& ((sum2_expected_prev !== last_sum2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum2_expected_prev);
		$display ("     Real value = %b", sum2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sum2_exp = sum2_expected_prev;
	end
	if (
		( sum3_expected_prev !== 1'bx ) && ( sum3_prev !== sum3_expected_prev )
		&& ((sum3_expected_prev !== last_sum3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum3_expected_prev);
		$display ("     Real value = %b", sum3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sum3_exp = sum3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module adder_4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg c_in;
// wires                                               
wire c0;
wire c1;
wire c2;
wire c_out;
wire sum0;
wire sum1;
wire sum2;
wire sum3;

wire sampler;                             

// assign statements (if any)                          
adder_4bit i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c_in(c_in),
	.c_out(c_out),
	.sum0(sum0),
	.sum1(sum1),
	.sum2(sum2),
	.sum3(sum3)
);

// a0
initial
begin
	a0 = 1'b0;
	a0 = #2000000 1'b1;
	a0 = #2000000 1'b0;
	a0 = #7000000 1'b1;
	a0 = #2000000 1'b0;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #11000000 1'b1;
	a1 = #2000000 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #11000000 1'b1;
	a2 = #2000000 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #7000000 1'b1;
	a3 = #2000000 1'b0;
	a3 = #2000000 1'b1;
	a3 = #2000000 1'b0;
end 

// b0
initial
begin
	b0 = 1'b0;
	b0 = #2000000 1'b1;
	b0 = #2000000 1'b0;
	b0 = #7000000 1'b1;
	b0 = #2000000 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #7000000 1'b1;
	b2 = #2000000 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
end 

// c_in
initial
begin
	c_in = 1'b0;
end 

adder_4bit_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.c_in(c_in),
	.sampler_tx(sampler)
);

adder_4bit_vlg_check_tst tb_out(
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c_out(c_out),
	.sum0(sum0),
	.sum1(sum1),
	.sum2(sum2),
	.sum3(sum3),
	.sampler_rx(sampler)
);
endmodule

